name: Build and test

on:
  push:
    branches:
      - master
      - prod
    tags:
      - v*
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  test:
    runs-on: ubuntu-24.04

    services:

      postgresql:
        image: quay.io/acoustid/postgresql:master
        ports:
          - 5432/tcp
        env:
          POSTGRES_USER: acoustid
          POSTGRES_PASSWORD: acoustid
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis
        ports:
          - 6379/tcp

      nats:
        # TODO find a way to enable jetstream, GA don't support specifying command for services
        image: nats:2.10
        ports:
          - 4222/tcp

      index:
        image: ghcr.io/acoustid/acoustid-index:stable
        ports:
          - 6080/tcp

    steps:

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Install additional requirements
        run: |
          sudo apt-get update
          sudo apt-get install libchromaprint-dev libpq-dev

      - name: Lint on the source code
        run: ./check.sh --lint --ci

      - name: Setup database
        run: |
          container=$(docker ps -q -f expose=5432)
          docker exec -i -e PGUSER=$PGUSER -e PGPASSWORD=$PGPASSWORD -e PGDATABASE=$PGDATABASE $container psql < ./admin/ci/create_db.sql
        env:
          PGUSER: acoustid
          PGPASSWORD: acoustid
          PGDATABASE: postgres

      - name: Run tests
        run: ./check.sh --test
        env:
          ACOUSTID_TEST_DATABASE_APP_HOST: localhost
          ACOUSTID_TEST_DATABASE_APP_PORT: ${{ job.services.postgresql.ports['5432'] }}
          ACOUSTID_TEST_DATABASE_APP_RO_HOST: localhost
          ACOUSTID_TEST_DATABASE_APP_RO_PORT: ${{ job.services.postgresql.ports['5432'] }}
          ACOUSTID_TEST_DATABASE_FINGERPRINT_HOST: localhost
          ACOUSTID_TEST_DATABASE_FINGERPRINT_PORT: ${{ job.services.postgresql.ports['5432'] }}
          ACOUSTID_TEST_DATABASE_FINGERPRINT_RO_HOST: localhost
          ACOUSTID_TEST_DATABASE_FINGERPRINT_RO_PORT: ${{ job.services.postgresql.ports['5432'] }}
          ACOUSTID_TEST_DATABASE_INGEST_HOST: localhost
          ACOUSTID_TEST_DATABASE_INGEST_PORT: ${{ job.services.postgresql.ports['5432'] }}
          ACOUSTID_TEST_DATABASE_INGEST_RO_HOST: localhost
          ACOUSTID_TEST_DATABASE_INGEST_RO_PORT: ${{ job.services.postgresql.ports['5432'] }}
          ACOUSTID_TEST_DATABASE_MUSICBRAINZ_HOST: localhost
          ACOUSTID_TEST_DATABASE_MUSICBRAINZ_PORT: ${{ job.services.postgresql.ports['5432'] }}
          ACOUSTID_TEST_DATABASE_MUSICBRAINZ_RO_HOST: localhost
          ACOUSTID_TEST_DATABASE_MUSICBRAINZ_RO_PORT: ${{ job.services.postgresql.ports['5432'] }}
          ACOUSTID_TEST_REDIS_HOST: localhost
          ACOUSTID_TEST_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
          ACOUSTID_TEST_INDEX_HOST: localhost
          ACOUSTID_TEST_INDEX_PORT: ${{ job.services.index.ports['6080'] }}

  build:
    runs-on: ubuntu-24.04
    needs: [ test ]

    steps:
    
      - name: Check out code
        uses: actions/checkout@v4

      - name: Update GIT_RELEASE in _release.py
        run: |
          GIT_VERSION=$(git describe --tags --always)
          echo "Setting GIT_RELEASE to $GIT_VERSION"
          echo "GIT_RELEASE = \"$GIT_VERSION\"" > acoustid/_release.py

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request' && github.actor != 'dependabot[bot]'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master
          cache-to: type=inline
